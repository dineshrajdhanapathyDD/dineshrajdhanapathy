name: Content Validation

on:
  pull_request:
    paths:
      - '_posts/**'
      - 'assets/images/blog/**'
      - '_layouts/**'
      - '_includes/**'
  push:
    branches: [ main ]
    paths:
      - '_posts/**'
      - 'assets/images/blog/**'

jobs:
  validate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      run: |
        bundle install
        
    - name: Validate blog posts
      run: |
        echo "🔍 Validating blog posts..."
        
        # Find all blog posts
        posts=$(find _posts -name "*.md" -type f)
        
        if [ -z "$posts" ]; then
          echo "No blog posts found to validate"
          exit 0
        fi
        
        # Validate each post
        error_count=0
        for post in $posts; do
          echo "Validating: $post"
          if ! ruby _scripts/validate-post.rb "$post"; then
            error_count=$((error_count + 1))
          fi
          echo "---"
        done
        
        if [ $error_count -gt 0 ]; then
          echo "❌ $error_count post(s) failed validation"
          exit 1
        else
          echo "✅ All posts passed validation"
        fi
        
    - name: Build Jekyll site with validation
      run: |
        echo "🏗️ Building Jekyll site with content validation..."
        VALIDATE_CONTENT=true bundle exec jekyll build --verbose
        
    - name: Check for broken links
      run: |
        echo "🔗 Checking for broken internal links..."
        
        # Simple check for common broken link patterns
        if grep -r "](/" _site/ --include="*.html" | grep -E "\]\(/[^)]*\s|\]\(/$"; then
          echo "❌ Potential broken links found"
          exit 1
        fi
        
        echo "✅ No obvious broken links detected"
        
    - name: Validate HTML
      uses: Cyb3r-Jak3/html5validator-action@v7.2.0
      with:
        root: _site/
        css: true
        
    - name: Check image optimization
      run: |
        echo "🖼️ Checking image optimization..."
        
        # Check for large images
        large_images=$(find assets/images/blog -name "*.jpg" -o -name "*.png" | xargs ls -la | awk '$5 > 500000 {print $9, $5}')
        
        if [ ! -z "$large_images" ]; then
          echo "⚠️ Large images found (>500KB):"
          echo "$large_images"
          echo "Consider optimizing these images for better performance"
        else
          echo "✅ All images are reasonably sized"
        fi
        
    - name: SEO Analysis
      run: |
        echo "🔍 Running basic SEO analysis..."
        
        # Check for posts without meta descriptions
        posts_without_seo=$(grep -L "seo_description:" _posts/*.md || true)
        if [ ! -z "$posts_without_seo" ]; then
          echo "⚠️ Posts without SEO descriptions:"
          echo "$posts_without_seo"
        fi
        
        # Check for posts without featured images
        posts_without_images=$(grep -L "image:" _posts/*.md || true)
        if [ ! -z "$posts_without_images" ]; then
          echo "⚠️ Posts without featured images:"
          echo "$posts_without_images"
        fi
        
        echo "✅ SEO analysis complete"
        
    - name: Performance Check
      run: |
        echo "⚡ Checking site performance..."
        
        # Check CSS file sizes
        css_files=$(find _site/assets/css -name "*.css" -exec ls -la {} \; | awk '$5 > 100000 {print $9, $5}')
        if [ ! -z "$css_files" ]; then
          echo "⚠️ Large CSS files found (>100KB):"
          echo "$css_files"
        fi
        
        # Check JS file sizes
        js_files=$(find _site/assets/js -name "*.js" -exec ls -la {} \; | awk '$5 > 100000 {print $9, $5}')
        if [ ! -z "$js_files" ]; then
          echo "⚠️ Large JS files found (>100KB):"
          echo "$js_files"
        fi
        
        echo "✅ Performance check complete"
        
    - name: Content Quality Report
      if: always()
      run: |
        echo "📊 CONTENT QUALITY REPORT"
        echo "========================="
        
        # Count posts
        post_count=$(find _posts -name "*.md" | wc -l)
        echo "Total posts: $post_count"
        
        # Count words
        if [ $post_count -gt 0 ]; then
          total_words=$(cat _posts/*.md | wc -w)
          avg_words=$((total_words / post_count))
          echo "Average words per post: $avg_words"
        fi
        
        # Count images
        image_count=$(find assets/images/blog -name "*.jpg" -o -name "*.png" -o -name "*.svg" | wc -l)
        echo "Blog images: $image_count"
        
        # Check categories and tags
        echo ""
        echo "Most used categories:"
        grep -h "categories:" _posts/*.md | sed 's/categories: \[//' | sed 's/\]//' | tr ',' '\n' | sed 's/^ *//' | sort | uniq -c | sort -nr | head -5
        
        echo ""
        echo "Most used tags:"
        grep -h "tags:" _posts/*.md | sed 's/tags: \[//' | sed 's/\]//' | tr ',' '\n' | sed 's/^ *//' | sort | uniq -c | sort -nr | head -10
name: Deploy Static Site to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Validate HTML structure
        run: |
          echo "üîç Validating HTML files..."
          
          # Check that required files exist
          required_files=("index.html" "projects.html" "contact.html" "blog/index.html")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "‚ùå Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "‚úÖ All required HTML files present"
          
      - name: Check assets
        run: |
          echo "üé® Checking assets..."
          
          # Check CSS files
          if [ -d "assets/css" ]; then
            css_count=$(find assets/css -name "*.css" | wc -l)
            echo "‚úÖ Found $css_count CSS files"
          else
            echo "‚ö†Ô∏è No CSS directory found"
          fi
          
          # Check JS files
          if [ -d "assets/js" ]; then
            js_count=$(find assets/js -name "*.js" | wc -l)
            echo "‚úÖ Found $js_count JavaScript files"
          else
            echo "‚ö†Ô∏è No JavaScript directory found"
          fi
          
          # Check images
          if [ -d "assets/images" ]; then
            img_count=$(find assets/images -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.svg" -o -name "*.gif" \) | wc -l)
            echo "‚úÖ Found $img_count image files"
          else
            echo "‚ö†Ô∏è No images directory found"
          fi
          
      - name: Verify blog structure
        run: |
          echo "üìù Checking blog structure..."
          
          if [ -f "blog/index.html" ]; then
            echo "‚úÖ Blog homepage exists"
          else
            echo "‚ùå Blog homepage missing"
            exit 1
          fi
          
          if [ -d "blog/posts" ]; then
            post_count=$(find blog/posts -name "*.html" | wc -l)
            echo "‚úÖ Found $post_count blog posts"
          else
            echo "‚ö†Ô∏è No blog posts directory found"
          fi
          
      - name: Check for broken links (basic)
        run: |
          echo "üîó Basic link validation..."
          
          # Check for obvious broken internal links in HTML files
          broken_links=0
          
          for file in *.html blog/*.html; do
            if [ -f "$file" ]; then
              # Check for links to non-existent files
              if grep -q 'href="[^"]*\.html"' "$file"; then
                echo "Checking links in $file..."
                # This is a basic check - in production you might want more sophisticated link checking
              fi
            fi
          done
          
          echo "‚úÖ Basic link validation complete"
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository as static files
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4